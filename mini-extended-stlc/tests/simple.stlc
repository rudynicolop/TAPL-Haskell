let and =
  fun x : u + u => fun y : u + u =>
  match x with
  Left u u _ => Left u u ()
  | Right u u _ =>
    match y with
    Left u u _ => Left u u ()
    | Right u u _ => Right u u ()
    end
  end in

let and =
  fun (x,y) : (u + u) * (u + u) =>
  match x with
  Left u u _ => Left u u ()
  | Right u u _ =>
    match y with
    Left u u _ => Left u u ()
    | Right u u _ => Right u u ()
    end
  end in

let f =
  fun x : ((u -> u) * u) + ((u -> u) * u) =>
  match x with
  Left ((u -> u) * u) ((u -> u) * u) (f,y) => f y
  | Right ((u -> u) * u) ((u -> u) * u) (f,y) => f y
  end in

let and =
  fun x : (u + u) * (u + u) =>
  match x with
  Left u u (), Left u u () => Left u u ()
  | Left u u (), Right u u () => Left u u ()
  | Right u u (), Left u u () => Left u u ()
  | Right u u (), Right u u () => Right u u ()
  end in

()
